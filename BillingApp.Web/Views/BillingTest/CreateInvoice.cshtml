@using BillingApp.DTO
@model BillingApp.DTO.InvoiceDTO
@{
    ViewData["Title"] = "Create Invoice";
}

<h2 class="mb-4">Create Invoice</h2>

<form asp-action="CreateInvoice" method="post" id="invoiceForm">
    <!-- Customer Details -->
    <div class="row mb-4">
        <div class="col-md-6">
            <label asp-for="CustomerPhone" class="form-label">Customer Phone*</label>
            <input asp-for="CustomerPhone" class="form-control" required>
            <span asp-validation-for="CustomerPhone" class="text-danger"></span>
        </div>
        <div class="col-md-6">
            <label asp-for="CustomerName" class="form-label">Customer Name</label>
            <input asp-for="CustomerName" class="form-control">
            <span asp-validation-for="CustomerName" class="text-danger"></span>
        </div>
    </div>

    <!-- Product Selection -->
    <div class="card mb-3">
        <div class="card-header bg-light">
            <h5 class="mb-0">Available Products</h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table" id="productsTable">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Price</th>
                            <th>Stock</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in ViewBag.Products as List<ProductDTO> ?? new List<ProductDTO>())
                        {
                            <tr data-product-id="@product.Id"
                                data-price="@product.Price"
                                data-stock="@product.Quantity"
                                class="@(product.Quantity <= 0 ? "table-secondary" : "")">
                                <td>@product.Name</td>
                                <td>₹@product.Price.ToString("N2")</td>
                                <td>
                                    @if (product.Quantity > 0)
                                    {
                                        <span class="@(product.Quantity < 5 ? "text-warning fw-bold" : "")">
                                            @product.Quantity
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-danger">Out of stock</span>
                                    }
                                </td>
                                <td>
                                    <button type="button" class="btn btn-sm btn-primary add-product-btn"
                                    @(product.Quantity <= 0 ? "disabled" : "")>
                                        <i class="bi bi-plus"></i> Add
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Items Table -->
    <div class="table-responsive mb-3 border rounded">
        <table class="table mb-0" id="invoiceItems">
            <thead class="table-light">
                <tr>
                    <th style="width:40%">Product</th>
                    <th style="width:15%">Qty</th>
                    <th style="width:15%">Price</th>
                    <th style="width:15%">Total</th>
                    <th style="width:15%">Action</th>
                </tr>
            </thead>
            <tbody>
                <!-- Items will be added dynamically -->
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="3" class="text-end border-0"><strong>Subtotal:</strong></td>
                    <td class="border-0"><span id="subtotalDisplay">₹0.00</span></td>
                    <td class="border-0"></td>
                </tr>
                <tr>
                    <td colspan="3" class="text-end border-0 text-success">
                        Discount (<span id="discountPercentDisplay">0</span>%):
                    </td>
                    <td class="border-0 text-success"><span id="discountAmountDisplay">-₹0.00</span></td>
                    <td class="border-0"></td>
                </tr>
                <tr>
                    <td colspan="3" class="text-end border-0 text-danger">
                        GST (<span id="gstPercentDisplay">0</span>%):
                    </td>
                    <td class="border-0 text-danger"><span id="gstAmountDisplay">+₹0.00</span></td>
                    <td class="border-0"></td>
                </tr>
                <tr class="table-active">
                    <td colspan="3" class="text-end border-0"><strong>Total Amount:</strong></td>
                    <td class="border-0"><strong><span id="totalAmountDisplay">₹0.00</span></strong></td>
                    <td class="border-0"></td>
                </tr>
            </tfoot>
        </table>
    </div>

    <!-- Tax and Discount Controls -->
    <div class="row mb-4">
        <div class="col-md-3">
            <label for="discountPercent" class="form-label">Discount %</label>
            <input type="number" class="form-control" id="discountPercent"
                   min="0" max="100" value="0" onchange="calculateTotals()">
            <input type="hidden" asp-for="DiscountPercentage" id="discountPercentage">
        </div>
        <div class="col-md-3">
            <label for="gstPercent" class="form-label">GST %</label>
            <input type="number" class="form-control" id="gstPercent"
                   min="0" max="100" value="18" onchange="calculateTotals()">
            <input type="hidden" asp-for="GSTPercentage" id="gstPercentage">
        </div>
    </div>

    <!-- Hidden Fields -->
    <input type="hidden" asp-for="Subtotal" id="subtotal">
    <input type="hidden" asp-for="DiscountAmount" id="discountAmount">
    <input type="hidden" asp-for="GSTAmount" id="gstAmount">
    <input type="hidden" asp-for="TotalAmount" id="totalAmount">

    <!-- Form Buttons -->
    <div class="d-flex justify-content-end gap-2 mt-4">
        <button type="reset" class="btn btn-secondary px-4">Clear</button>
        <button type="submit" class="btn btn-success px-4">
            <i class="bi bi-receipt"></i> Generate Invoice
        </button>
    </div>
</form>
@section Scripts {
    <script>
        // Initialize products array from ViewBag
        const products = @Html.Raw(Json.Serialize(ViewBag.Products as List<ProductDTO> ?? new List<ProductDTO>()));
        let itemCounter = 0;

        // Add product to invoice
        document.querySelectorAll('.add-product-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const row = this.closest('tr');
                const productId = parseInt(row.dataset.productId);
                const price = parseFloat(row.dataset.price);
                const stock = parseInt(row.dataset.stock);
                const productName = row.cells[0].textContent;

                // Check if product already added
                if(document.querySelector(`input[name="Items[${itemCounter}].ProductId"][value="${productId}"]`)) {
                    alert('This product is already in the invoice');
                    return;
                }

                // Check stock
                if(stock <= 0) {
                    alert('This product is out of stock!');
                    return;
                }

                // Add row to invoice items
                const newRow = document.createElement('tr');
                newRow.innerHTML = `
                    <td>
                        ${productName}
                        <input type="hidden" name="Items[${itemCounter}].ProductId" value="${productId}">
                        <input type="hidden" name="Items[${itemCounter}].ProductName" value="${productName}">
                    </td>
                    <td>
                        <input type="number" name="Items[${itemCounter}].Quantity"
                               class="form-control quantity" value="1" min="1" max="${stock}"
                               onchange="updateStock(this, ${productId}, ${stock}); calculateTotals()">
                    </td>
                    <td>
                        <input type="text" class="form-control price" value="${price.toFixed(2)}" readonly>
                        <input type="hidden" name="Items[${itemCounter}].Price" value="${price}">
                    </td>
                    <td>
                        <input type="text" class="form-control total" value="${price.toFixed(2)}" readonly>
                    </td>
                            <td>
            <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeItem(this, ${productId})">
                <i class="bi bi-trash"></i> Remove
            </button>
        </td>
                `;
                document.querySelector('#invoiceItems tbody').appendChild(newRow);
                itemCounter++;
                calculateTotals();

                // Update stock display
                updateStock(newRow.querySelector('.quantity'), productId, stock);
            });
        });

        // Update stock display when quantity changes
        function updateStock(input, productId, originalStock) {
            const quantity = parseInt(input.value || 0);
            const stockRow = document.querySelector(`#productsTable tr[data-product-id="${productId}"]`);
            const stockCell = stockRow.querySelector('td:nth-child(3)');
            const addButton = stockRow.querySelector('.add-product-btn');

            // Calculate remaining stock
            const remainingStock = originalStock - quantity;

            // Update display
            stockCell.innerHTML = remainingStock > 0 ?
                `<span class="${remainingStock < 5 ? 'text-warning fw-bold' : ''}">${remainingStock}</span>` :
                '<span class="text-danger">Out of stock</span>';

            // Disable add button if no stock left
            if(remainingStock <= 0) {
                addButton.disabled = true;
            } else {
                // Update max quantity for existing items
                document.querySelectorAll(`input[name$=".ProductId"][value="${productId}"]`).forEach(input => {
                    const qtyInput = input.closest('tr').querySelector('.quantity');
                    qtyInput.max = remainingStock + parseInt(qtyInput.value);
                });
            }
        }

        // Remove item and restore stock
        function removeItem(button, productId) {
            const row = button.closest('tr');
            const quantity = parseInt(row.querySelector('.quantity').value);
            const stockRow = document.querySelector(`#productsTable tr[data-product-id="${productId}"]`);

            // Restore stock display
            const stockText = stockRow.querySelector('td:nth-child(3)').textContent;
            const currentDisplayedStock = parseInt(stockText) || 0;
            const actualStock = currentDisplayedStock + quantity;

            stockRow.querySelector('td:nth-child(3)').innerHTML = actualStock > 0 ?
                `<span class="${actualStock < 5 ? 'text-warning fw-bold' : ''}">${actualStock}</span>` :
                '<span class="text-danger">Out of stock</span>';

            if(actualStock > 0) {
                stockRow.querySelector('.add-product-btn').disabled = false;
            }

            row.remove();
            calculateTotals();
        }

        // Calculate all totals
        function calculateTotals() {
            // Calculate subtotal
            let subtotal = 0;
            document.querySelectorAll('#invoiceItems tbody tr').forEach(row => {
                const quantity = parseFloat(row.querySelector('.quantity').value) || 0;
                const price = parseFloat(row.querySelector('.price').value) || 0;
                const total = quantity * price;
                row.querySelector('.total').value = total.toFixed(2);
                subtotal += total;
            });

            // Update subtotal display
            document.getElementById('subtotal').value = subtotal;
            document.getElementById('subtotalDisplay').textContent = '₹' + subtotal.toFixed(2);

            // Calculate discount
            const discountPercent = parseFloat(document.getElementById('discountPercent').value) || 0;
            document.getElementById('discountPercentage').value = discountPercent;
            const discountAmount = subtotal * (discountPercent / 100);
            document.getElementById('discountAmount').value = discountAmount;
            document.getElementById('discountAmountDisplay').textContent = '-₹' + discountAmount.toFixed(2);
            document.getElementById('discountPercentDisplay').textContent = discountPercent;

            // Calculate GST
            const gstPercent = parseFloat(document.getElementById('gstPercent').value) || 0;
            document.getElementById('gstPercentage').value = gstPercent;
            const taxableAmount = subtotal - discountAmount;
            const gstAmount = taxableAmount * (gstPercent / 100);
            document.getElementById('gstAmount').value = gstAmount;
            document.getElementById('gstAmountDisplay').textContent = '+₹' + gstAmount.toFixed(2);
            document.getElementById('gstPercentDisplay').textContent = gstPercent;

            // Calculate total
            const totalAmount = taxableAmount + gstAmount;
            document.getElementById('totalAmount').value = totalAmount;
            document.getElementById('totalAmountDisplay').textContent = '₹' + totalAmount.toFixed(2);
        }

        // Initialize calculation on page load
        document.addEventListener('DOMContentLoaded', function() {
            calculateTotals();

            // Force red button styling if needed
            document.querySelectorAll('.btn-danger').forEach(btn => {
                btn.style.backgroundColor = '#dc3545';
                btn.style.borderColor = '#dc3545';
                btn.style.color = 'white';
                btn.style.padding = '0.25rem 0.5rem';
            });
        });
    </script>
}

