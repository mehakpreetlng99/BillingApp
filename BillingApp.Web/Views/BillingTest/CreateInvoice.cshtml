@model BillingApp.DTO.InvoiceDTO
@{
    ViewData["Title"] = "Create Invoice";
}

<h2>Create Invoice</h2>

<form asp-action="CreateInvoice" method="post">
    <div class="mb-3">
        <label asp-for="CustomerPhone" class="form-label">Customer Phone</label>
        <input asp-for="CustomerPhone" class="form-control" required>
        <span asp-validation-for="CustomerPhone" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="CustomerName" class="form-label">Customer Name</label>
        <input asp-for="CustomerName" class="form-control">
        <span asp-validation-for="CustomerName" class="text-danger"></span>
    </div>

    <table class="table" id="invoiceItems">
        <thead>
            <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Total</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <!-- Invoice items will be added here dynamically -->
        </tbody>
    </table>

    <button type="button" class="btn btn-primary" onclick="addItem()">Add Product</button>

    <h4>Total: $<span id="totalAmount">0.00</span></h4>
    <input type="hidden" asp-for="TotalAmount" id="totalAmountHidden" />

    <button type="submit" class="btn btn-success">Generate Invoice</button>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        let products = @Html.Raw(Json.Serialize(ViewBag.Products ?? new List<object>()));
        let itemIndex = 0;

        function addItem() {
            let tbody = document.querySelector("#invoiceItems tbody");
            let row = document.createElement("tr");

            row.innerHTML = `
                <td>
                    <select name="Items[${itemIndex}].ProductId" class="form-control product-select" onchange="updatePrice(this)">
                        <option value="">Select Product</option>
                        ${products.map(p => `<option value="${p.id}" data-price="${p.price}">${p.name}</option>`).join('')}
                    </select>
                    <input type="hidden" name="Items[${itemIndex}].ProductName" value="" />
                </td>
                <td><input name="Items[${itemIndex}].Quantity" type="number" class="form-control quantity" value="1" min="1" onchange="updateTotal()"></td>
                <td><input name="Items[${itemIndex}].Price" type="text" class="form-control price" readonly></td>
                <td><input type="text" class="form-control total" readonly></td>
                <td><button type="button" class="btn btn-danger" onclick="removeItem(this)">Remove</button></td>
            `;

            tbody.appendChild(row);
            itemIndex++;
        }

        function updatePrice(select) {
            let row = select.closest("tr");
            let priceField = row.querySelector(".price");
            let price = select.options[select.selectedIndex].dataset.price;
            let productName = select.options[select.selectedIndex].text;

            priceField.value = price || 0;
            row.querySelector(`input[name$=".ProductName"]`).value = productName;
            updateTotal();
        }

        function updateTotal() {
            let totalAmount = 0;
            document.querySelectorAll("#invoiceItems tbody tr").forEach(row => {
                let quantity = parseFloat(row.querySelector(".quantity").value) || 0;
                let price = parseFloat(row.querySelector(".price").value) || 0;
                let totalField = row.querySelector(".total");
                let total = quantity * price;

                totalField.value = total.toFixed(2);
                totalAmount += total;
            });

            document.getElementById("totalAmount").textContent = totalAmount.toFixed(2);
            document.getElementById("totalAmountHidden").value = totalAmount.toFixed(2);
        }

        function removeItem(button) {
            button.closest("tr").remove();
            updateTotal();
            // Decrement itemIndex if you want to maintain sequential numbering
            // itemIndex--;
        }
    </script>
}
@* @model BillingApp.DTO.InvoiceDTO *@

@* @{ *@
@*     ViewData["Title"] = "Create Invoice"; *@
@* } *@

@* <h2>Create Invoice</h2> *@

@* <form asp-action="CreateInvoice" method="post"> *@
@*     <div class="mb-3"> *@
@*         <label for="customerPhone" class="form-label">Customer Phone</label> *@
@*         <input type="text" class="form-control" id="customerPhone" name="Invoice.CustomerPhone" asp-for="CustomerPhone" required> *@
@*     </div> *@

@*     <div class="mb-3"> *@
@*         <label for="customerName" class="form-label">Customer Name</label> *@
@*         <input type="text" class="form-control" id="customerName" asp-for="CustomerName" name="Invoice.CustomerName"> *@
@*     </div> *@

@*     <table class="table" id="invoiceItems"> *@
@*         <thead> *@
@*             <tr> *@
@*                 <th>Product</th> *@
@*                 <th>Quantity</th> *@
@*                 <th>Price</th> *@
@*                 <th>Total</th> *@
@*                 <th>Actions</th> *@
@*             </tr> *@
@*         </thead> *@
@*         <tbody> *@
@*             <!-- Invoice items will be added here dynamically --> *@
@*         </tbody> *@
@*     </table> *@

@*     <button type="button" class="btn btn-primary" onclick="addItem()">Add Product</button> *@

@*     <h4>Total: $<span id="totalAmount">0.00</span></h4> *@

@*     <button type="submit" class="btn btn-success">Generate Invoice</button> *@
@* </form> *@

@* <script> *@
@*     let products = @Html.Raw(Json.Serialize(ViewBag.Products ?? new List<object>())); *@

@*     function addItem() { *@
@*         let tbody = document.querySelector("#invoiceItems tbody"); *@
@*         let row = document.createElement("tr"); *@

@*         row.innerHTML = ` *@
@*             <td> *@
@*                 <select class="form-control product-select" onchange="updatePrice(this)"> *@
@*                     <option value="">Select Product</option> *@
@*                     ${products.map(p => `<option value="${p.id}" data-price="${p.price}">${p.name}</option>`).join('')} *@
@*                 </select> *@
@*             </td> *@
@*             <td><input type="number" class="form-control quantity" value="1" min="1" onchange="updateTotal()"></td> *@
@*             <td><input type="text" class="form-control price" readonly></td> *@
@*             <td><input type="text" class="form-control total" readonly></td> *@
@*             <td><button type="button" class="btn btn-danger" onclick="removeItem(this)">Remove</button></td> *@
@*         `; *@

@*         tbody.appendChild(row); *@
@*     } *@

@*     function updatePrice(select) { *@
@*         let priceField = select.closest("tr").querySelector(".price"); *@
@*         let price = select.options[select.selectedIndex].dataset.price; *@
@*         priceField.value = price || 0; *@
@*         updateTotal(); *@
@*     } *@

@*     function updateTotal() { *@
@*         let totalAmount = 0; *@
@*         document.querySelectorAll("#invoiceItems tbody tr").forEach(row => { *@
@*             let quantity = row.querySelector(".quantity").value; *@
@*             let price = row.querySelector(".price").value; *@
@*             let totalField = row.querySelector(".total"); *@
@*             let total = quantity * price; *@
@*             totalField.value = total.toFixed(2); *@
@*             totalAmount += total; *@
@*         }); *@

@*         document.getElementById("totalAmount").textContent = totalAmount.toFixed(2); *@
@*     } *@

@*     function removeItem(button) { *@
@*         button.closest("tr").remove(); *@
@*         updateTotal(); *@
@*     } *@
@* </script> *@
