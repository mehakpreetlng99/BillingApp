@model BillingApp.DTO.InvoiceDTO
@{
    ViewData["Title"] = "Create Invoice";
}

<h2 class="mb-4">Create Invoice</h2>

<form asp-action="CreateInvoice" method="post" id="invoiceForm">
    <!-- Customer Details -->
    <div class="row mb-4">
        <div class="col-md-6">
            <label asp-for="CustomerPhone" class="form-label">Customer Phone*</label>
            <input asp-for="CustomerPhone" class="form-control" required>
            <span asp-validation-for="CustomerPhone" class="text-danger"></span>
        </div>
        <div class="col-md-6">
            <label asp-for="CustomerName" class="form-label">Customer Name</label>
            <input asp-for="CustomerName" class="form-control">
            <span asp-validation-for="CustomerName" class="text-danger"></span>
        </div>
    </div>

    <!-- Items Table -->
    <div class="table-responsive mb-3 border rounded">
        <table class="table mb-0" id="invoiceItems">
            <thead class="table-light">
                <tr>
                    <th style="width:40%">Product</th>
                    <th style="width:15%">Qty</th>
                    <th style="width:15%">Price</th>
                    <th style="width:15%">Total</th>
                    <th style="width:15%">Action</th>
                </tr>
            </thead>
            <tbody>
                <!-- Items will be added dynamically -->
            </tbody>
            <!-- Invoice Summary -->
            <tfoot>
                <tr>
                    <td colspan="3" class="text-end border-0"><strong>Subtotal:</strong></td>
                    <td class="border-0"><span id="subtotalDisplay">₹0.00</span></td>
                    <td class="border-0"></td>
                </tr>
                <tr>
                    <td colspan="3" class="text-end border-0 text-success">
                        Discount (<span id="discountPercentDisplay">0</span>%):
                    </td>
                    <td class="border-0 text-success"><span id="discountAmountDisplay">-₹0.00</span></td>
                    <td class="border-0"></td>
                </tr>
                <tr>
                    <td colspan="3" class="text-end border-0 text-danger">
                        GST (<span id="gstPercentDisplay">0</span>%):
                    </td>
                    <td class="border-0 text-danger"><span id="gstAmountDisplay">+₹0.00</span></td>
                    <td class="border-0"></td>
                </tr>
                <tr class="table-active">
                    <td colspan="3" class="text-end border-0"><strong>Total Amount:</strong></td>
                    <td class="border-0"><strong><span id="totalAmountDisplay">₹0.00</span></strong></td>
                    <td class="border-0"></td>
                </tr>
            </tfoot>
        </table>
    </div>

    <!-- Add Item Button -->
    <div class="mb-4">
        <button type="button" class="btn btn-primary" onclick="addItemRow()">
            <i class="bi bi-plus-circle"></i> Add Item
        </button>
    </div>

    <!-- Tax and Discount Controls -->
    <div class="row mb-4">
        <div class="col-md-3">
            <label for="discountPercent" class="form-label">Discount %</label>
            <input type="number" class="form-control" id="discountPercent"
                   min="0" max="100" value="0" onchange="calculateTotals()">
            <input type="hidden" asp-for="DiscountPercentage" id="discountPercentage">
        </div>
        <div class="col-md-3">
            <label for="gstPercent" class="form-label">GST %</label>
            <input type="number" class="form-control" id="gstPercent"
                   min="0" max="100" value="18" onchange="calculateTotals()">
            <input type="hidden" asp-for="GSTPercentage" id="gstPercentage">
        </div>
    </div>

    <!-- Hidden Fields -->
    <input type="hidden" asp-for="Subtotal" id="subtotal">
    <input type="hidden" asp-for="DiscountAmount" id="discountAmount">
    <input type="hidden" asp-for="GSTAmount" id="gstAmount">
    <input type="hidden" asp-for="TotalAmount" id="totalAmount">

    <!-- Form Buttons -->
    <div class="d-flex justify-content-end gap-2 mt-4">
        <button type="reset" class="btn btn-secondary px-4">Clear</button>
        <button type="submit" class="btn btn-success px-4">
            <i class="bi bi-receipt"></i> Generate Invoice
        </button>
    </div>
</form>

@* @section Styles { *@
@*     <style> *@
@*         /* Fix remove button styling */ *@
@*         .btn-remove-item { *@
@*             padding: 0.25rem 0.5rem; *@
@*             font-size: 0.8rem; *@
@*         } *@

@*         /* Ensure table borders are consistent */ *@
@*         #invoiceItems tfoot tr:not(:last-child) td { *@
@*             border-bottom: 1px solid #dee2e6; *@
@*         } *@

@*         /* Highlight important numbers */ *@
@*         .text-success { *@
@*             color: #198754 !important; *@
@*         } *@

@*         .text-danger { *@
@*             color: #dc3545 !important; *@
@*         } *@
@*     </style> *@
@* } *@

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Product data from server
        const products = @Html.Raw(Json.Serialize(ViewBag.Products ?? new List<object>()));
        let itemCounter = 0;

        // Add new item row
        function addItemRow() {
            const tbody = document.querySelector("#invoiceItems tbody");
            const newRow = document.createElement("tr");
            newRow.className = "align-middle";
            newRow.innerHTML = `
                <td>
                    <select name="Items[${itemCounter}].ProductId"
                            class="form-select form-select-sm product-select"
                            onchange="updateProductDetails(this)" required>
                        <option value="">Select Product</option>
                        ${products.map(p => `
                            <option value="${p.id}"
                                    data-price="${p.price}"
                                    data-name="${p.name}">
                                ${p.name} (₹${p.price.toFixed(2)})
                            </option>
                        `).join('')}
                    </select>
                    <input type="hidden" name="Items[${itemCounter}].ProductName" class="product-name">
                    <input type="hidden" name="Items[${itemCounter}].Price" class="unit-price">
                </td>
                <td>
                    <input type="number" name="Items[${itemCounter}].Quantity"
                           class="form-control form-control-sm quantity"
                           min="1" value="1"
                           onchange="updateRowTotal(this)" required>
                </td>
                <td class="unit-price-display">₹0.00</td>
                <td class="row-total-display">₹0.00</td>
                <td>
                    <button type="button" class="btn btn-sm btn-danger btn-remove-item"
                            onclick="removeItemRow(this)">
                        <i class="bi bi-trash"></i> Remove
                    </button>
                </td>
            `;
            tbody.appendChild(newRow);
            itemCounter++;
        }

        // Remove item row
        function removeItemRow(button) {
            const row = button.closest("tr");
            row.remove();
            calculateTotals();
        }

        // Update product details when selection changes
        function updateProductDetails(select) {
            const row = select.closest("tr");
            const option = select.options[select.selectedIndex];

            if (option.value) {
                const price = parseFloat(option.dataset.price) || 0;
                row.querySelector(".unit-price").value = price;
                row.querySelector(".product-name").value = option.dataset.name;
                row.querySelector(".unit-price-display").textContent = `₹${price.toFixed(2)}`;
                updateRowTotal(row.querySelector(".quantity"));
            }
        }

        // Calculate row total
        function updateRowTotal(input) {
            const row = input.closest("tr");
            const quantity = parseFloat(input.value) || 0;
            const unitPrice = parseFloat(row.querySelector(".unit-price").value) || 0;
            const rowTotal = quantity * unitPrice;

            row.querySelector(".row-total-display").textContent = `₹${rowTotal.toFixed(2)}`;
            calculateTotals();
        }

        // Calculate all totals
        function calculateTotals() {
            // Calculate subtotal from all rows
            let subtotal = 0;
            document.querySelectorAll("#invoiceItems tbody tr").forEach(row => {
                const totalText = row.querySelector(".row-total-display").textContent;
                subtotal += parseFloat(totalText.replace(/[^0-9.-]+/g,"")) || 0;
            });

            // Get percentages (default to 0 if invalid)
            const discountPercent = parseFloat(document.getElementById("discountPercent").value) || 0;
            const gstPercent = parseFloat(document.getElementById("gstPercent").value) || 0;

            // Calculate amounts
            const discountAmount = subtotal * (discountPercent / 100);
            const taxableAmount = subtotal - discountAmount;
            const gstAmount = taxableAmount * (gstPercent / 100);
            const totalAmount = taxableAmount + gstAmount;

            // Update displays
            document.getElementById("subtotalDisplay").textContent = `₹${subtotal.toFixed(2)}`;
            document.getElementById("discountPercentDisplay").textContent = discountPercent.toFixed(0);
            document.getElementById("discountAmountDisplay").textContent = `-₹${discountAmount.toFixed(2)}`;
            document.getElementById("gstPercentDisplay").textContent = gstPercent.toFixed(0);
            document.getElementById("gstAmountDisplay").textContent = `+₹${gstAmount.toFixed(2)}`;
            document.getElementById("totalAmountDisplay").textContent = `₹${totalAmount.toFixed(2)}`;

            // Update hidden form fields
            document.getElementById("subtotal").value = subtotal.toFixed(2);
            document.getElementById("discountPercentage").value = discountPercent;
            document.getElementById("discountAmount").value = discountAmount.toFixed(2);
            document.getElementById("gstPercentage").value = gstPercent;
            document.getElementById("gstAmount").value = gstAmount.toFixed(2);
            document.getElementById("totalAmount").value = totalAmount.toFixed(2);
        }

        // Initialize with one empty row
        document.addEventListener("DOMContentLoaded", function() {
            addItemRow();
            calculateTotals(); // Initialize totals
        });
    </script>
}

@* @model BillingApp.DTO.InvoiceDTO *@
@* @{ *@
@*     ViewData["Title"] = "Create Invoice"; *@
@* } *@

@* <h2>Create Invoice</h2> *@

@* <form asp-action="CreateInvoice" method="post" id="invoiceForm"> *@
@*     <div class="row mb-3"> *@
@*         <div class="col-md-6"> *@
@*             <label asp-for="CustomerPhone" class="form-label">Customer Phone*</label> *@
@*             <input asp-for="CustomerPhone" class="form-control" required> *@
@*             <span asp-validation-for="CustomerPhone" class="text-danger"></span> *@
@*         </div> *@
@*         <div class="col-md-6"> *@
@*             <label asp-for="CustomerName" class="form-label">Customer Name</label> *@
@*             <input asp-for="CustomerName" class="form-control"> *@
@*             <span asp-validation-for="CustomerName" class="text-danger"></span> *@
@*         </div> *@
@*     </div> *@

@*     <div class="table-responsive mb-3"> *@
@*         <table class="table" id="invoiceItems"> *@
@*             <thead class="table-light"> *@
@*                 <tr> *@
@*                     <th>Product</th> *@
@*                     <th>Quantity</th> *@
@*                     <th>Unit Price</th> *@
@*                     <th>Total</th> *@
@*                     <th>Action</th> *@
@*                 </tr> *@
@*             </thead> *@
@*             <tbody> *@
@*                 <!-- Items will be added dynamically --> *@
@*             </tbody> *@
@*         </table> *@
@*     </div> *@

@*     <button type="button" class="btn btn-primary mb-4" onclick="addItemRow()"> *@
@*         <i class="bi bi-plus-circle"></i> Add Item *@
@*     </button> *@

@*     <div class="row"> *@
@*         <div class="col-md-4"> *@
@*             <div class="card mb-3"> *@
@*                 <div class="card-body"> *@
@*                     <h5 class="card-title">Subtotal</h5> *@
@*                     <div class="display-6" id="subtotalDisplay">₹0.00</div> *@
@*                     <input type="hidden" asp-for="Subtotal" id="subtotal"> *@
@*                 </div> *@
@*             </div> *@
@*         </div> *@

@*         <div class="col-md-4"> *@
@*             <div class="card mb-3"> *@
@*                 <div class="card-body"> *@
@*                     <div class="mb-3"> *@
@*                         <label for="discountPercent" class="form-label">Discount %</label> *@
@*                         <input type="number" class="form-control" id="discountPercent" *@
@*                                min="0" max="100" value="" onchange="calculateTotals()"> *@
@*                         <input type="hidden" asp-for="DiscountPercentage" id="discountPercentage"> *@
@*                     </div> *@
@*                     <div> *@
@*                         <span class="text-muted">Amount: </span> *@
@*                         <span id="discountAmountDisplay">₹0.00</span> *@
@*                         <input type="hidden" asp-for="DiscountAmount" id="discountAmount"> *@
@*                     </div> *@
@*                 </div> *@
@*             </div> *@
@*         </div> *@

@*         <div class="col-md-4"> *@
@*             <div class="card mb-3"> *@
@*                 <div class="card-body"> *@
@*                     <div class="mb-3"> *@
@*                         <label for="gstPercent" class="form-label">GST %</label> *@
@*                         <input type="number" class="form-control" id="gstPercent" *@
@*                                min="0" max="100" value="18" onchange="calculateTotals()"> *@
@*                         <input type="hidden" asp-for="GSTPercentage" id="gstPercentage"> *@
@*                     </div> *@
@*                     <div> *@
@*                         <span class="text-muted">Amount: </span> *@
@*                         <span id="gstAmountDisplay">₹0.00</span> *@
@*                         <input type="hidden" asp-for="GSTAmount" id="gstAmount"> *@
@*                     </div> *@
@*                 </div> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@

@*     <div class="card bg-light mb-4"> *@
@*         <div class="card-body text-end"> *@
@*             <h4 class="mb-0"> *@
@*                 Total Amount: <span id="totalAmountDisplay">₹0.00</span> *@
@*                 <input type="hidden" asp-for="TotalAmount" id="totalAmount"> *@
@*             </h4> *@
@*         </div> *@
@*     </div> *@

@*     <div class="d-flex justify-content-end gap-2"> *@
@*         <button type="reset" class="btn btn-secondary">Clear</button> *@
@*         <button type="submit" class="btn btn-success"> *@
@*             <i class="bi bi-receipt"></i> Generate Invoice *@
@*         </button> *@
@*     </div> *@
@* </form> *@

@* @section Scripts { *@
@*     <partial name="_ValidationScriptsPartial" /> *@
@*     <script> *@
@*         // Product data from server *@
@*         const products = @Html.Raw(Json.Serialize(ViewBag.Products ?? new List<object>())); *@
@*         let itemCounter = 0; *@

@*         // Add new item row to the table *@
@*         function addItemRow() { *@
@*             const tbody = document.querySelector("#invoiceItems tbody"); *@
@*             const newRow = document.createElement("tr"); *@
@*             newRow.innerHTML = ` *@
@*                 <td> *@
@*                     <select name="Items[${itemCounter}].ProductId" *@
@*                             class="form-select product-select" *@
@*                             onchange="updateProductDetails(this)" required> *@
@*                         <option value="">-- Select Product --</option> *@
@*                         ${products.map(p => ` *@
@*                             <option value="${p.id}" *@
@*                                     data-price="${p.price}" *@
@*                                     data-name="${p.name}"> *@
@*                                 ${p.name} (₹${p.price}) *@
@*                             </option> *@
@*                         `).join('')} *@
@*                     </select> *@
@*                     <input type="hidden" name="Items[${itemCounter}].ProductName" class="product-name"> *@
@*                     <input type="hidden" name="Items[${itemCounter}].Price" class="unit-price"> *@
@*                 </td> *@
@*                 <td> *@
@*                     <input type="number" name="Items[${itemCounter}].Quantity" *@
@*                            class="form-control quantity" *@
@*                            min="1" value="1" *@
@*                            onchange="updateRowTotal(this)" required> *@
@*                 </td> *@
@*                 <td class="unit-price-display">₹0.00</td> *@
@*                 <td class="row-total-display">₹0.00</td> *@
@*                 <td> *@
@*                     <button type="button" class="btn btn-sm btn-danger" *@
@*                             onclick="this.closest('tr').remove(); calculateTotals()"> *@
@*                         <i class="bi bi-trash"></i> *@
@*                     </button> *@
@*                 </td> *@
@*             `; *@
@*             tbody.appendChild(newRow); *@
@*             itemCounter++; *@
@*         } *@

@*         // Update product details when selection changes *@
@*         function updateProductDetails(select) { *@
@*             const row = select.closest("tr"); *@
@*             const option = select.options[select.selectedIndex]; *@

@*             if (option.value) { *@
@*                 const price = parseFloat(option.dataset.price) || 0; *@
@*                 row.querySelector(".unit-price").value = price; *@
@*                 row.querySelector(".product-name").value = option.dataset.name; *@
@*                 row.querySelector(".unit-price-display").textContent = `₹${price.toFixed(2)}`; *@
@*                 updateRowTotal(row.querySelector(".quantity")); *@
@*             } *@
@*         } *@

@*         // Calculate row total *@
@*         function updateRowTotal(input) { *@
@*             const row = input.closest("tr"); *@
@*             const quantity = parseFloat(input.value) || 0; *@
@*             const unitPrice = parseFloat(row.querySelector(".unit-price").value) || 0; *@
@*             const rowTotal = quantity * unitPrice; *@

@*             row.querySelector(".row-total-display").textContent = `₹${rowTotal.toFixed(2)}`; *@
@*             calculateTotals(); *@
@*         } *@

@*         // Calculate all totals *@
@*         function calculateTotals() { *@
@*             // Calculate subtotal *@
@*             let subtotal = 0; *@
@*             document.querySelectorAll("tr").forEach(row => { *@
@*                 const totalDisplay = row.querySelector(".row-total-display"); *@
@*                 if (totalDisplay) { *@
@*                     subtotal += parseFloat(totalDisplay.textContent.replace('₹', '')) || 0; *@
@*                 } *@
@*             }); *@

@*             // Get percentages (default to 0 if empty) *@
@*             const discountPercent = parseFloat(document.getElementById("discountPercent").value) || 0; *@
@*             const gstPercent = parseFloat(document.getElementById("gstPercent").value) || 0; *@

@*             // Calculate amounts *@
@*             const discountAmount = subtotal * (discountPercent / 100); *@
@*             const taxableAmount = subtotal - discountAmount; *@
@*             const gstAmount = taxableAmount * (gstPercent / 100); *@
@*             const totalAmount = taxableAmount + gstAmount; *@

@*             // Update displays *@
@*             document.getElementById("subtotalDisplay").textContent = `₹${subtotal.toFixed(2)}`; *@
@*             document.getElementById("discountAmountDisplay").textContent = `₹${discountAmount.toFixed(2)}`; *@
@*             document.getElementById("gstAmountDisplay").textContent = `₹${gstAmount.toFixed(2)}`; *@
@*             document.getElementById("totalAmountDisplay").textContent = `₹${totalAmount.toFixed(2)}`; *@

@*             // Update hidden fields (will be null if empty) *@
@*             document.getElementById("subtotal").value = subtotal || null; *@
@*             document.getElementById("discountPercentage").value = discountPercent || null; *@
@*             document.getElementById("discountAmount").value = discountAmount || null; *@
@*             document.getElementById("gstPercentage").value = gstPercent || null; *@
@*             document.getElementById("gstAmount").value = gstAmount || null; *@
@*             document.getElementById("totalAmount").value = totalAmount || null; *@
@*         } *@

@*         // Initialize with one empty row *@
@*         document.addEventListener("DOMContentLoaded", function() { *@
@*             addItemRow(); *@
@*         }); *@
@*     </script> *@
@* } *@

@* @model BillingApp.DTO.InvoiceDTO *@
@* @{ *@
@*     ViewData["Title"] = "Create Invoice"; *@
@* } *@

@* <h2>Create Invoice</h2> *@

@* <form asp-action="CreateInvoice" method="post"> *@
@*     <div class="mb-3"> *@
@*         <label asp-for="CustomerPhone" class="form-label">Customer Phone</label> *@
@*         <input asp-for="CustomerPhone" class="form-control" required> *@
@*         <span asp-validation-for="CustomerPhone" class="text-danger"></span> *@
@*     </div> *@

@*     <div class="mb-3"> *@
@*         <label asp-for="CustomerName" class="form-label">Customer Name</label> *@
@*         <input asp-for="CustomerName" class="form-control"> *@
@*         <span asp-validation-for="CustomerName" class="text-danger"></span> *@
@*     </div> *@

@*     <table class="table" id="invoiceItems"> *@
@*         <thead> *@
@*             <tr> *@
@*                 <th>Product</th> *@
@*                 <th>Quantity</th> *@
@*                 <th>Price</th> *@
@*                 <th>Total</th> *@
@*                 <th>Actions</th> *@
@*             </tr> *@
@*         </thead> *@
@*         <tbody> *@
            
@*         </tbody> *@
@*     </table> *@

@*     <button type="button" class="btn btn-primary" onclick="addItem()">Add Product</button> *@

@*     <h4>Total: $<span id="totalAmount">0.00</span></h4> *@
@*     <input type="hidden" asp-for="TotalAmount" id="totalAmountHidden" /> *@

@*     <button type="submit" class="btn btn-success">Generate Invoice</button> *@
@* </form> *@

@* @section Scripts { *@
@*     <partial name="_ValidationScriptsPartial" /> *@
@*     <script> *@
@*         let products = @Html.Raw(Json.Serialize(ViewBag.Products ?? new List<object>())); *@
@*         let itemIndex = 0; *@

@*         function addItem() { *@
@*             let tbody = document.querySelector("#invoiceItems tbody"); *@
@*             let row = document.createElement("tr"); *@

@*             row.innerHTML = ` *@
@*                 <td> *@
@*                     <select name="Items[${itemIndex}].ProductId" class="form-control product-select" onchange="updatePrice(this)"> *@
@*                         <option value="">Select Product</option> *@
@*                         ${products.map(p => `<option value="${p.id}" data-price="${p.price}">${p.name}</option>`).join('')} *@
@*                     </select> *@
@*                     <input type="hidden" name="Items[${itemIndex}].ProductName" value="" /> *@
@*                 </td> *@
@*                 <td><input name="Items[${itemIndex}].Quantity" type="number" class="form-control quantity" value="1" min="1" onchange="updateTotal()"></td> *@
@*                 <td><input name="Items[${itemIndex}].Price" type="text" class="form-control price" readonly></td> *@
@*                 <td><input type="text" class="form-control total" readonly></td> *@
@*                 <td><button type="button" class="btn btn-danger" onclick="removeItem(this)">Remove</button></td> *@
@*             `; *@

@*             tbody.appendChild(row); *@
@*             itemIndex++; *@
@*         } *@

@*         function updatePrice(select) { *@
@*             let row = select.closest("tr"); *@
@*             let priceField = row.querySelector(".price"); *@
@*             let price = select.options[select.selectedIndex].dataset.price; *@
@*             let productName = select.options[select.selectedIndex].text; *@

@*             priceField.value = price || 0; *@
@*             row.querySelector(`input[name$=".ProductName"]`).value = productName; *@
@*             updateTotal(); *@
@*         } *@

@*         function updateTotal() { *@
@*             let totalAmount = 0; *@
@*             document.querySelectorAll("#invoiceItems tbody tr").forEach(row => { *@
@*                 let quantity = parseFloat(row.querySelector(".quantity").value) || 0; *@
@*                 let price = parseFloat(row.querySelector(".price").value) || 0; *@
@*                 let totalField = row.querySelector(".total"); *@
@*                 let total = quantity * price; *@

@*                 totalField.value = total.toFixed(2); *@
@*                 totalAmount += total; *@
@*             }); *@

@*             document.getElementById("totalAmount").textContent = totalAmount.toFixed(2); *@
@*             document.getElementById("totalAmountHidden").value = totalAmount.toFixed(2); *@
@*         } *@

@*         function removeItem(button) { *@
@*             button.closest("tr").remove(); *@
@*             updateTotal(); *@
            
@*         } *@
@*     </script> *@
@* } *@

